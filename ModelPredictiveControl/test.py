from MyMath import forward_substitution
from MyMath import backward_substitution
import numpy as np

# A=np.array([[1., 0., 0.],
#            [2., 1., 0.],
#            [1., 2., 1.]])
#
# b = np.array([[2., 3., 1.],
#      [2., 3., 1.],
#      [2., 4., 1.]])
#
# b = np.array([[2., 3.],
#      [2., 3.],
#      [2., 4.]])
#
# b = np.array([[2.],
#      [2.],
#      [2.]])
from Systems import AirCraft
from QuadraticProgram import QuadraticProgram


sys = AirCraft()
QP = QuadraticProgram(sys)

# zv_k = [[  2.09719785e-01],
#  [ -2.58929379e-01],
#  [ -3.01636240e-01],
#  [ -9.40136999e-01],
#  [  3.99622527e+02],
#  [  2.09719785e-01],
#  [ -7.75719981e-02],
#  [ -1.34373473e-01],
#  [ -3.47773039e-01],
#  [  4.73557241e-01],
#  [  3.90842471e+02],
#  [ -7.75719981e-02],
#  [  4.54511936e-02],
#  [ -3.72957122e-03],
#  [ -2.35142989e-01],
#  [ -4.95019233e-03],
#  [  3.76180207e+02],
#  [  4.54511936e-02],
#  [ -1.12575574e-03],
#  [ -3.89703411e-04],
#  [ -2.33473482e-01],
#  [  8.05178514e-03],
#  [  3.61280199e+02],
#  [ -1.12575574e-03],
#  [  5.67869071e-04],
#  [  6.44327917e-04],
#  [ -2.31969075e-01],
#  [ -1.04174820e-03],
#  [  3.46351916e+02],
#  [  5.67869071e-04],
#  [ -6.50539423e-04],
#  [  7.71624133e-04],
#  [ -2.31554793e-01],
#  [  2.13365617e-03],
#  [  3.31449839e+02],
#  [ -6.50539423e-04],
#  [ -3.69509271e-04],
#  [  1.02268345e-03],
#  [ -2.30733896e-01],
#  [  1.18874870e-03],
#  [  3.16575201e+02],
#  [ -3.69509271e-04],
#  [ -2.35626886e-03],
#  [  3.36700235e-03],
#  [ -2.27404301e-01],
#  [  9.71526302e-03],
#  [  3.01742206e+02],
#  [ -2.35626886e-03],
#  [ -8.74586923e-03],
#  [  1.33422283e-02],
#  [ -2.13452843e-01],
#  [  3.72216289e-02],
#  [  2.87039876e+02],
#  [ -8.74586923e-03],
#  [ -6.45648477e-03],
#  [  1.78250506e-02],
#  [ -1.99073137e-01],
#  [  2.09018996e-02],
#  [  2.72805566e+02],
#  [ -6.45648477e-03],
#  [  1.11578458e+05],
#  [ -1.25767521e+05],
#  [  1.01824826e+04],
#  [ -1.81812211e+03],
#  [ -4.21509254e+02],
#  [  6.37119096e+04],
#  [ -2.53520706e+04],
#  [ -8.67608160e+03],
#  [ -1.59105832e+03],
#  [  1.44231753e+02],
#  [  4.90375252e+02],
#  [ -6.77530761e+02],
#  [  5.91885827e+02],
#  [ -1.37048300e+03],
#  [ -6.85235834e+01],
#  [ -4.92505765e+04],
#  [  4.50713939e+04],
#  [ -4.23958379e+02],
#  [ -1.16074309e+03],
#  [  1.98777238e+00],
#  [ -2.93838565e+04],
#  [  2.68017679e+04],
#  [ -1.20689973e+02],
#  [ -9.62014279e+02],
#  [ -1.20135709e+00],
#  [ -2.52785117e+04],
#  [  2.31837881e+04],
#  [ -1.64878625e+02],
#  [ -7.74317474e+02],
#  [  7.67316948e-01],
#  [ -1.87729473e+04],
#  [  1.72649510e+04],
#  [ -1.29120232e+02],
#  [ -5.97633303e+02],
#  [ -7.36750118e-01],
#  [ -1.26381971e+04],
#  [  1.18373201e+04],
#  [ -1.43266652e+02],
#  [ -4.31941490e+02],
#  [ -1.26801443e+00],
#  [ -6.04973336e+03],
#  [  6.49401320e+03],
#  [ -3.01319024e+02],
#  [ -2.77211260e+02],
#  [  9.50242423e+00],
#  [ -4.21055884e+03],
#  [  4.53808858e+03],
#  [ -2.37228200e+02],
#  [ -1.33346052e+02],
#  [  2.02084617e+01]]

zv_k = np.array([[  5.75612002e-02],
 [ -7.10676192e-02],
 [ -8.27892514e-02],
 [ -2.58036761e-01],
 [  3.99896396e+02],
 [  5.75612002e-02],
 [  9.10356277e-03],
 [ -7.44075503e-02],
 [ -1.39168203e-01],
 [ -6.27742450e-03],
 [  3.97431852e+02],
 [  9.10356277e-03],
 [  1.44790084e+04],
 [ -1.88177202e+04],
 [  2.26204584e+03],
 [ -5.89225575e+02],
 [ -5.44664635e+01],
 [  1.48441274e+02],
 [  6.18066096e+00],
 [  7.12462571e+01],
 [ -2.93702139e+02],
 [ -8.65554146e+00]])

x0 = np.array([[0], [0], [0], [400], [0]])

for i in range(0, 1, 100):
    delta_zv = QP.solve(x0, zv_k)
rd, rp = QP.residual(x0, zv_k)




print(np.square(rd).sum(), np.square(rp).sum())

A = np.array([[  0.23996015,   0., 0.,   0., 0.],
              [ -0.37221757,   1., 0.,   0., 0.],
              [ -0.99008755,   0., 0.13885973,   0., 0.],
              [-48.93540655, 64.1, 2.39923411,   1., 0.],
              [  0.,           0., 0.,           0., 1.]])

b = np.array([[-1.2346445 ,1],
              [-1.43828223,1],
              [-4.48282454,1],
              [-1.79989043,1],
              [1.,1]])

x_f = forward_substitution(A, b)
if (abs(np.dot(A, x_f)-b)).sum() < 1e-10:
    print("forward_substitution did it right, error =", (abs(np.dot(A, x_f)-b)).sum())
else:
    print("forward_substitution failed")

x_b = backward_substitution(A.T, b)
if (abs(np.dot(A.T, x_b)-b)).sum() < 1e-10:
    print("backward_substitution did it right, error =", (abs(np.dot(A.T, x_b)-b)).sum())
else:
    print("backward_substitution failed")